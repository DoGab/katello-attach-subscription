#!/usr/bin/env ruby

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

# support for bundler, currently commented out
#require 'rubygems'
#require 'bundler/setup'
require 'optparse'
require 'yaml'
require 'apipie-bindings'

@defaults = {
  :noop      => false,
  :uri       => 'https://localhost/',
  :timeout   => 300,
  :user      => 'admin',
  :pass      => 'changeme',
  :org       => 1,
  :usecache  => false,
  :cachefile => 'katello-attach-subscription.cache',
  :debug     => false,
  :search    => nil,
}

@options = {
  :yamlfile  => 'katello-attach-subscription.yaml',
}

# Parse the command line options
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} [options]"
  opts.version = "0.1"

  opts.on("-U", "--uri=URI", "URI to the Satellite") do |u|
    @options[:uri] = u
  end
  opts.on("-t", "--timeout=TIMEOUT", OptionParser::DecimalInteger, "Timeout value in seconds for any API calls. -1 means never timeout") do |t|
    @options[:timeout] = t
  end
  opts.on("-u", "--user=USER", "User to log in to Satellite") do |u|
    @options[:user] = u
  end
  opts.on("-p", "--pass=PASS", "Password to log in to Satellite") do |p|
    @options[:pass] = p
  end
  opts.on("-o", "--organization-id=ID", "ID of the Organization") do |o|
    @options[:org] = o
  end
  opts.on("-c", "--config=FILE", "configuration in YAML format") do |c|
    @options[:yamlfile] = c
  end
  opts.on("-n", "--noop", "do not actually execute anything") do
    @options[:noop] = true
  end
  opts.on("-H", "--used-hypervisors-only", "only search for hypervisors that are in use") do
    @options[:search] = 'virtual_guests:*'
  end
  opts.on("-s", "--search=SEARCH", "search for machines matching this string only") do |s|
    @options[:search] = s
  end
  opts.on("--use-cache", "use cache file") do
    @options[:usecache] = true
  end
  opts.on("--cache-file=FILE", "read or write to cache file, based on --use-cache value") do |cf|
    @options[:cachefile] = cf
  end
  opts.on("-d", "--debug", "debug the script") do
    @options[:debug] = true
  end
end
optparse.parse!

# load the configuration files settings
@yaml = YAML.load_file(@options[:yamlfile])

# override configuration files settings with command lines one
if @yaml.has_key?(:settings) and @yaml[:settings].is_a?(Hash)
  @yaml[:settings].each do |key,val|
    if not @options.has_key?(key)
      @options[key] = val
    end
  end
end

# missing configuration parameters from file or command line are taken from the default one
@defaults.each do |key,val|
  if not @options.has_key?(key)
    @options[key] = val
  end
end

# main function
def vdcupdate()
  # satellite url has to start with https or PUT will fail with http error
  unless @options[:uri].start_with?('https://')
    abort " FATAL ERROR: the uri must start with https://"
  end

  # create api binding
  api = ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]})

  # initialize variables
  systems = []
  subs = {}
  page = 0
  req = nil
  cachefile = @options[:cachefile].to_s + "_org" + @options[:org].to_s

  # Fill systems array from API of satellite. Check for cache usage.
  if @options[:usecache] and File.file?(cachefile)
    begin
      systems = YAML.load_file(cachefile)
    rescue Exception
      abort " FATAL ERROR: Failed to read cache file. re-run without --use-cache."
    end
  else
    # no cache wanted or no cache file exists
    # checking all of the systems 100 at the time, from page 0 to latest
    while (page == 0 or req['results'].length == req['per_page'].to_i)
      # increase page counter
      page += 1
      # get 100 results
      # filter to be applied: organization, and search options
      req = api.resource(:systems).call(:index, {:organization_id => @options[:org], :page => page, :per_page => 100, :search => @options[:search]})
      # concatenate output - all of the results
      systems.concat(req['results'])
    end
    # always write the cache file, even if not asked, to be used in the future
    File.open(cachefile, 'w') {|f| f.write(YAML.dump(systems)) }
  end

  # cycle for each system found
  systems.each do |system|
    # initialize variable
    has_desired_sub = nil 
    desired_sub = nil 
    desired_sub_hash = nil
    desired_type = 'Hypervisor'
    remove_other = true
    remove_subs = []
    auto_attach = false

    # get detail for each system
    if @options[:debug]
      puts "DEBUG: detail of the current system to be checked:"
      p system
    end
    sys = api.resource(:systems).call(:show, {:id => system['id'], :fields => 'full'})
    # add to array system the name of the system itself taken from id
    puts "Current system: #{system['name']} (#{system['id']})"

    # for each item in yaml extract sub
    if @options[:debug]
      puts "DEBUG: YAML dump"
      p @yaml
    end
    @yaml[:subs].each do |sub|
      # extract the name of the host to be registered
      hostnameregex = Regexp.new(sub['hostname'])
      if @options[:debug]
        puts "DEBUG: Current host: '#{sub['hostname'].inspect}', looking for pattern '#{hostnameregex.inspect}'"
      end

      # check if the current system match the desired one
      if hostnameregex.match(system['name'])
        # if "type" has been specified on yaml file check if match.
        # the default is to check on "Hypervisor"
        # if DO NOT match, skip to next sub
        if sub.has_key?('type')
          desired_type = sub['type']
        end
        if sys['type'] != desired_type
          puts "Skipping '#{system['name']}' as system type '#{sys['type']}' is different from desired '#{desired_type}'"
          next
        end

        # if "registered_by" has been specified on yaml file check if match.
        # the default is to not check it, any value will be good
        # if DO NOT match, skip to next sub
        if sub.has_key?('registered_by') and sub['registered_by']
          if sub['registered_by'] != system['registered_by']
            puts "Skipping '#{system['name']}' as the system registered_by '#{system['registered_by']}' is different from desired '#{sub['registered_by']}'"
            next
          end
        end

        # set the desidered subscription to be associated
        desired_sub_hash = sub['sub']
        # if "remove_other" has been set, set the flag
        if sub.has_key?('remove_other')
          remove_other = sub['remove_other']
        end
        # if "remove_subs" has been set, use it
        if sub.has_key?('remove_subs')
          remove_subs = sub['remove_subs']
        end
        # if "auto_attach" has been set, set the flag
        if sub.has_key?('auto_attach')
          auto_attach = sub['auto_attach']
        end
        # if the system is found, stop cyclyng over yaml, 
        break
      end
    end

    # check if one or more hosts need a subscription
    if @options[:debug]
      puts "DEBUG: desired_sub_hash value"
      p desired_sub_hash
    end
    if desired_sub_hash
      if @options[:debug]
        puts " Checking subscription for #{system['id']}"
      end
      has_desired_sub_hash = {}
      # for every product (hash key in yaml) check the desired subs
      desired_sub_hash.each do |product, desidered_product_sub_array|
        if @options[:debug]
          puts "in the desired_sub_hash #{desidered_product_sub_array}"
        end
        has_desired_sub = false
        # check the current associated subscription to this system
        if api.has_resource?(:host_subscriptions)
          req = api.resource(:host_subscriptions).call(:index, {:organization_id => @options[:org], :host_id => system['host_id'], :per_page => 100})
        else
          req = api.resource(:subscriptions).call(:index, {:organization_id => @options[:org], :system_id => system['id'], :per_page => 100})
        end
        # check a single subscription in the array
        req['results'].each do |sub|
          # move subscription_id key to cp_id, to have a standard API interface
          # Katello 2.2 do not have cp_id, in subscription_id there is the id of the sub
          # Katello 3.0 has cp_id with the id of the sub (to be confirmed) and subscription_id populated with an integer
          if sub.has_key?('subscription_id') and !(sub.has_key?('cp_id')) and !(sub['subscription_id'].is_a?(Integer))
            sub['cp_id'] = sub.delete('subscription_id')
          end
          if @options[:debug]
            puts "DEBUG: subscription detail"
            p sub
            p desired_sub_hash.flatten(2)
          end
          # WORKAROUND even if checking the current array of licence is correct, from a formal point of view, using multiple product 
          # because of this bug, currently we are looking for the sub_id into the full hash, since this is unique
          if desired_sub_hash.flatten(2).include?(sub['cp_id'])
            puts " subscription #{sub['cp_id']} for #{product} product is already attached to #{system['id']}"
            has_desired_sub = true
          # else, if this is not the subscription desidered and remove_other is set, remove this subscription to the system
          elsif sub['cp_id'] != nil and (remove_other or remove_subs.include?(sub['cp_id']))
            puts " removing subscription #{sub['cp_id']} from system #{system['id']}"
            if not @options[:noop]
              if api.has_resource?(:host_subscriptions)
                api.resource(:host_subscriptions).call(:remove_subscriptions, {:host_id => system['host_id'], :subscriptions => [{:id => sub['id']}]})
              else
                api.resource(:subscriptions).call(:destroy, {:system_id => system['id'], :id => sub['id']})
              end
              puts " removed"
            else
              puts " [noop] removed"
            end
          end
        end
        # if all of the subscriptions marked for this product is missing, mark it to be added
        if not has_desired_sub
          puts "Subscription for product " + product.to_s + " currently missing. Set for the attach."
          has_desired_sub_hash[product] = desidered_product_sub_array
        end
      end
 
      if @options[:debug]
        puts "DEBUG: has_desired_sub_hash: #{has_desired_sub_hash}"
      end

      # if the system do not has proper subscritions, attach it
      if has_desired_sub_hash
        # cycle for each product
        has_desired_sub_hash.each do |product, desired_subs_hash|
          # cycle for each subscription
          desired_subs_hash.each do |desired_sub|
            if @options[:debug]
              puts "DEBUG: current subscription to be checked"
              p desired_sub
            end
            # if subs[desired_sub] is false, retrieve the current subscription detail
            begin
              # this will retrieve the sub detail only once for each sub
              subs[desired_sub] ||= api.resource(:subscriptions).call(:show, {:id => desired_sub, :organization_id => @options[:org]})
            # in case of error adding the subscription, stop the process
            rescue Exception => e
              puts " ERROR: unable to retrieve subscription #{desired_sub}"
              puts e.message
              puts e.backtrace.inspect
              exit 1
            end
            # Currently Satellite do not know for Hypervisor ESXi type the number of the socket. Set to 1.
            desired_quantity = 1
            # if there are not enough available subscriptions check the next available
            if desired_quantity > subs[desired_sub]['available'].to_i
              puts " cannot add subscription #{desired_sub} (id: #{subs[desired_sub]['id']}): only #{subs[desired_sub]['available']} available, but #{desired_quantity} requested"
              next
            end
            # if requirements are met, add the subscription
            puts " adding #{desired_sub} for #{product} (id: #{subs[desired_sub]['id']})"
  
            # fix the number of the available and consumed subscription because this will be retrieved only once
            subs[desired_sub]['available'] -= desired_quantity
            subs[desired_sub]['consumed'] += desired_quantity

            if not @options[:noop]
              begin
                if api.has_resource?(:host_subscriptions)
                  api.resource(:host_subscriptions).call(:add_subscriptions, {:host_id => system['host_id'], :subscriptions => [{:id => subs[desired_sub]['id'], :quantity => desired_quantity}]})
                else
                  api.resource(:subscriptions).call(:create, {:system_id => system['id'], :subscriptions => [{:id => desired_sub, :quantity => desired_quantity}]})
                end
                puts " added #{desired_sub} for #{product} in system #{system['id']}"
                # stop cycling over the subscription available since the first available has been added
                break
              # in case of error adding the subscription, stop the process
              rescue Exception => e
                puts " ERROR: unable to attach subscription"
                puts e.message
                puts e.backtrace.inspect
                exit 1
              end
            else
              puts " [noop] added #{desired_sub} for #{product} in system #{system['id']}"
              break
            end
          end
        end
      end

      if auto_attach
         puts " auto-attaching subs to system #{system['id']}"
         if not @options[:noop]
           api.resource(:systems).call(:refresh_subscriptions, {:id =>  system['id']})
         else
           puts " [noop] auto-attached"
         end
      end
    end
  end
end

vdcupdate
