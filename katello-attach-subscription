#!/usr/bin/env ruby

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

require 'rubygems'
require 'bundler/setup'
require 'optparse'
require 'yaml'
require 'apipie-bindings'
#require 'pry'

@defaults = {
  :noop      => false,
  :uri       => 'https://localhost/',
  :timeout   => 300,
  :user      => 'admin',
  :pass      => 'changeme',
  :org       => 1,
  :usecache  => false,
  :cachefile => 'katello-attach-subscription.cache',
  :search    => nil,
}

@options = {
  :yamlfile  => 'katello-attach-subscription.yaml',
}

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} [options]"
  opts.version = "0.1"

  opts.on("-U", "--uri=URI", "URI to the Satellite") do |u|
    @options[:uri] = u
  end
  opts.on("-t", "--timeout=TIMEOUT", OptionParser::DecimalInteger, "Timeout value in seconds for any API calls. -1 means never timeout") do |t|
    @options[:timeout] = t
  end
  opts.on("-u", "--user=USER", "User to log in to Satellite") do |u|
    @options[:user] = u
  end
  opts.on("-p", "--pass=PASS", "Password to log in to Satellite") do |p|
    @options[:pass] = p
  end
  opts.on("-o", "--organization-id=ID", "ID of the Organization") do |o|
    @options[:org] = o
  end
  opts.on("-c", "--config=FILE", "configuration in YAML format") do |c|
    @options[:yamlfile] = c
  end
  opts.on("-n", "--noop", "do not actually execute anything") do
    @options[:noop] = true
  end
  opts.on("-H", "--used-hypervisors-only", "only search for hypervisors that are in use") do
    @options[:search] = 'virtual_guests:*'
  end
  opts.on("-s", "--search=SEARCH", "search for machines matching this string only") do |s|
    @options[:search] = s
  end
  opts.on("--use-cache", "use cache file") do
    @options[:usecache] = true
  end
  opts.on("--cache-file=FILE", "read or write to cache file, based on --use-cache value") do |cf|
    @options[:cachefile] = cf
  end
end
optparse.parse!

@yaml = YAML.load_file(@options[:yamlfile])

if @yaml.has_key?(:settings) and @yaml[:settings].is_a?(Hash)
  @yaml[:settings].each do |key,val|
    if not @options.has_key?(key)
      @options[key] = val
    end
  end
end

@defaults.each do |key,val|
  if not @options.has_key?(key)
    @options[key] = val
  end
end

def vdcupdate()
  # create api binding
  api = ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]})

  # initialize variables
  systems = []
  subs = {}
  page = 0
  req = nil

  # fill systems array from API of satellite
  # check if page == 0 and not last page
  if @options[:usecache]
    # TODO need sanity check, what if file do not exits? what if value are not valid?
    systems = YAML.load_file(@options[:cachefile])
  else
    while (page == 0 or req['results'].length == req['per_page'].to_i)
      # increase page counter
      page += 1
      # get 100 results
      # filter to be applied: organization
      req = api.resource(:systems).call(:index, {:organization_id => @options[:org], :page => page, :per_page => 100, :search => @options[:search]})
      # concatenate output - all of the results
      systems.concat(req['results'])
    end
    File.open(@options[:cachefile], 'w') {|f| f.write(YAML.dump(systems)) }
  end

  # cycle for each system
  systems.each do |system|
    # get detail for each system
    sys = api.resource(:systems).call(:show, {:id => system['id'], :fields => 'full'})
    # add to array system the name of the system itself taken from id
    puts "#{system['name']} (#{system['id']})"

    has_desired_sub = nil 
    #has_desired_sub_hash = []
    #has_desired_sub_hash = Hash.new([])
    desired_sub = nil 
    desired_sub_hash = nil
    desired_type = 'Hypervisor'
    remove_other = true
    # for each item in yaml extract sub
    #p @yaml
    @yaml[:subs].each do |sub|
      # if "type" has been specified on yaml file check if match.
      # the default is to check on "Hypervisor"
      # if DO NOT match, skip to next sub
      if sub.has_key?('type')
        desired_type = sub['type']
      end
      if sys['type'] != desired_type
        puts "Skipping '#{system['name']}' as type '#{sys['type']}' != '#{desired_type}'"
        next
      end

      #p sys['type']

      if sub.has_key?('registered_by') and sub['registered_by']
        if sub['registered_by'] != system['registered_by']
          puts "Skipping '#{system['name']}' as registered_by '#{sub['registered_by']}' != '#{system['registered_by']}'"
          next
        end
      end
      # extract the name of the host to be registered
      hostnameregex = Regexp.new(sub['hostname'])
      STDERR.puts sub['hostname'].inspect
      STDERR.puts hostnameregex.inspect
      # check against the current system item
      if hostnameregex.match(system['name'])
        # set the desidered subscription to be associated
        desired_sub_hash = sub['sub']
        # if "remove_other" has been set, set the flag
        if sub.has_key?('remove_other')
          remove_other = sub['remove_other']
        end
        # stop cyclyng over yaml, 
        break
      end
    end

    #p desired_sub_hash

    # check if any hosts has a match
    if desired_sub_hash
      puts "in the desidered"
      has_desired_sub_hash = {}
      # check the current subscription associated
      if api.has_resource?(:host_subscriptions)
        req = api.resource(:host_subscriptions).call(:index, {:organization_id => @options[:org], :host_id => system['host_id'], :per_page => 100})
      else
        req = api.resource(:subscriptions).call(:index, {:organization_id => @options[:org], :system_id => system['id'], :per_page => 100})
      end
      # we need to check for each product the needed subs
      desired_sub_hash.each do |product, desidered_product_sub_array|
        puts "in the desired_sub_hash #{desidered_product_sub_array}"
        has_desired_sub = false
        # for each subscription do
        req['results'].each do |sub|
          #p sub['id']
	  if (sub.has_key?('subscription_id')
	    sub[:cp_id] = sub.delete(:subscription_id)
	  end
          if desidered_product_sub_array.include?(sub['cp_id'])
            puts " not found #{desidered_product_sub_array} already associated, #{sub['cp_id']}"
            #has_desired_sub_hash << desired_product_sub_array
            has_desired_sub = true
          # else, if this is not the one desidered, and remove_other is set, remove the current subscription
          elsif remove_other
            puts " removing #{sub['cp_id']}"
            if not @options[:noop]
              if api.has_resource?(:host_subscriptions)
                api.resource(:host_subscriptions).call(:remove_subscriptions, {:host_id => system['host_id'], :subscriptions => [{:id => sub['id']}]})
              else
                api.resource(:subscriptions).call(:destroy, {:system_id => system['id'], :id => sub['id']})
              end
              puts " removed"
            else
              puts " [noop] removed"
            end
          end
        end
        if not has_desired_sub
          puts "sub for product missing"
          has_desired_sub_hash[product] = desidered_product_sub_array
        end
      end
 
     puts "#{has_desired_sub_hash}"

      # if the content host do not has subscrition, or the "needed" one, attach it
      if has_desired_sub_hash
        has_desired_sub_hash.each do |product, desired_subs_hash|
          subs[desired_sub] ||= api.resource(:subscriptions).call(:show, {:id => desired_sub, :organization_id => @options[:org]})
          desired_sub_id = subs[desired_sub]['id']
          desired_quantity = 1
          if desired_quantity > subs[desired_sub]['available'].to_i
            puts " cannot add #{desired_sub} (id: #{desired_sub_id}): only #{res['available']} available, but #{desired_quantity} requested"
            next
          end
          puts " adding #{desired_subs_hash} for #{product} (id: #{desired_sub_id})"

          subs[desired_sub]['available'] -= desired_quantity
          subs[desired_sub]['consumed'] += desired_quantity

          desired_subs_hash.each do |desired_sub|
            if not @options[:noop]
              begin
                if api.has_resource?(:host_subscriptions)
                  api.resource(:host_subscriptions).call(:add_subscriptions, {:host_id => system['host_id'], :subscriptions => [{:id => desired_sub_id, :quantity => desired_quantity}]})
                else
                  api.resource(:subscriptions).call(:create, {:system_id => system['id'], :subscriptions => [{:id => desired_sub, :quantity => 1}]})
                end
                puts " added #{desired_sub} for #{product}"
                break
              # need to check the return code and if fail go to next licence in the pool
              rescue
                next
              end
            else
              puts " [noop] added #{desired_sub} for #{product}"
              break
            end
          end
        end
      end
    end
  end
end

vdcupdate
